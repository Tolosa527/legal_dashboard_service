FROM node:20-alpine AS builder

WORKDIR /app

# Install Python and required system dependencies
RUN apk add --no-cache python3 py3-pip curl

# Install uv for Python dependency management
RUN pip install uv

# Copy project configuration
COPY pyproject.toml uv.lock ./

# Install Python dependencies
RUN uv sync --frozen --no-dev

# Copy application code
COPY . .

# Export the frontend
RUN uv run reflex export --frontend-only --no-zip

# Production stage
FROM nginx:alpine

# Copy the exported frontend files
COPY --from=builder /app/.web/_static /usr/share/nginx/html

# Copy custom nginx configuration for SPA
COPY deployment/nginx-frontend.conf /etc/nginx/conf.d/default.conf

# Create non-root user for security
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -u 1001 -G appuser && \
    chown -R appuser:appuser /usr/share/nginx/html && \
    chown -R appuser:appuser /var/cache/nginx && \
    chown -R appuser:appuser /var/log/nginx && \
    chown -R appuser:appuser /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R appuser:appuser /var/run/nginx.pid

USER appuser

# Expose frontend port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
