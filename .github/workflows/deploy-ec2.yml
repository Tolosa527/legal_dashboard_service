name: Deploy to EC2

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: Add EC2 to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment directory on EC2
      run: |
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "sudo mkdir -p /opt/legal_dashboard"

    - name: Copy deployment files to EC2
      run: |
        # Copy docker-compose file
        scp deployment/docker-compose.prod.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
        
        # Copy nginx configuration
        scp deployment/nginx.conf ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
        
        # Copy management scripts
        scp deployment/manage.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
        scp deployment/backup-mongodb.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
        
        # Move files to proper location
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          sudo cp /tmp/docker-compose.prod.yml /opt/legal_dashboard/
          sudo cp /tmp/nginx.conf /opt/legal_dashboard/
          sudo cp /tmp/manage.sh /opt/legal_dashboard/
          sudo cp /tmp/backup-mongodb.sh /opt/legal_dashboard/
          sudo chmod +x /opt/legal_dashboard/manage.sh
          sudo chmod +x /opt/legal_dashboard/backup-mongodb.sh
        "

    - name: Update environment file on EC2
      run: |
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          # Update .env.prod with new image registry and tag
          sudo sed -i 's|DOCKER_REGISTRY=.*|DOCKER_REGISTRY=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}|' /opt/legal_dashboard/.env.prod
          sudo sed -i 's|TAG=.*|TAG=${{ inputs.tag }}|' /opt/legal_dashboard/.env.prod
        "

    - name: Deploy application on EC2
      run: |
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          # Pull latest images and restart services
          sudo /opt/legal_dashboard/manage.sh update
        "

    - name: Verify deployment
      run: |
        # Wait for services to start
        sleep 30
        
        # Check if services are healthy
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          sudo /opt/legal_dashboard/manage.sh status
        "

    - name: Generate deployment summary
      run: |
        echo "## ðŸš€ EC2 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "âœ… **Deployment completed successfully**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“‹ Deployment Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag:** ${{ inputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Host:** ${{ secrets.EC2_HOST }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”— Application URLs:" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend:** http://${{ secrets.EC2_HOST }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend API:** http://${{ secrets.EC2_HOST }}:8000" >> $GITHUB_STEP_SUMMARY
